/* beautiful-react-hooks version: 0.35.0 */
import { objectSpread2 as _objectSpread2, slicedToArray as _slicedToArray } from './_virtual/_rollupPluginBabelHelpers.js';
import { useEffect, useRef, useState } from 'react';
import createHandlerSetter from './utils/createHandlerSetter.js';
import useMouseEvents from './useMouseEvents.js';
import useTouchEvents from './useTouchEvents.js';
import { getPointerCoordinates, getDirection } from './utils/swipeUtils.js';

var defaultOptions = {
  threshold: 15,
  preventDefault: true
};

var useSilentSwipeState = function useSilentSwipeState() {
  var targetRef = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;
  var onSwipeStart = arguments.length > 2 ? arguments[2] : undefined;
  var onSwipeMove = arguments.length > 3 ? arguments[3] : undefined;
  var onSwipeEnd = arguments.length > 4 ? arguments[4] : undefined;
  var startingPointRef = useRef([-1, -1]);
  var directionRef = useRef(null);
  var isDraggingRef = useRef(false);
  var alphaRef = useRef(false);

  var opts = _objectSpread2(_objectSpread2({}, defaultOptions), options || {});

  var _useMouseEvents = useMouseEvents(targetRef),
      onMouseDown = _useMouseEvents.onMouseDown,
      onMouseMove = _useMouseEvents.onMouseMove,
      onMouseLeave = _useMouseEvents.onMouseLeave,
      onMouseUp = _useMouseEvents.onMouseUp;

  var _useTouchEvents = useTouchEvents(targetRef),
      onTouchStart = _useTouchEvents.onTouchStart,
      onTouchMove = _useTouchEvents.onTouchMove,
      onTouchEnd = _useTouchEvents.onTouchEnd,
      onTouchCancel = _useTouchEvents.onTouchCancel;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var startSwipe = function startSwipe(event) {
    var _getPointerCoordinate = getPointerCoordinates(event),
        _getPointerCoordinate2 = _slicedToArray(_getPointerCoordinate, 2),
        clientX = _getPointerCoordinate2[0],
        clientY = _getPointerCoordinate2[1];

    startingPointRef.current = [clientX, clientY];
    directionRef.current = null;

    if (onSwipeStart) {
      onSwipeStart({
        clientX: clientX,
        clientY: clientY
      });
    }

    if (opts.preventDefault) {
      event.preventDefault();
      event.stopPropagation();
    }
  };

  var continueSwipe = function continueSwipe(event) {
    var _getPointerCoordinate3 = getPointerCoordinates(event),
        _getPointerCoordinate4 = _slicedToArray(_getPointerCoordinate3, 2),
        clientX = _getPointerCoordinate4[0],
        clientY = _getPointerCoordinate4[1];

    if (opts.preventDefault) {
      event.preventDefault();
      event.stopPropagation();
    }

    if (startingPointRef.current[0] !== -1 && startingPointRef.current[1] !== -1) {
      var alpha = [startingPointRef.current[0] - clientX, startingPointRef.current[1] - clientY];

      if (Math.abs(alpha[0]) > opts.threshold || Math.abs(alpha[1]) > opts.threshold) {
        isDraggingRef.current = true;
        directionRef.current = getDirection([clientX, clientY], startingPointRef.current, alpha);
        alphaRef.current = alpha;

        if (onSwipeMove) {
          onSwipeMove({
            clientX: clientX,
            clientY: clientY,
            direction: directionRef.current,
            alphaX: alphaRef.current[0],
            alphaY: alphaRef.current[1]
          });
        }
      }
    }
  };

  var endSwipe = function endSwipe(event) {
    if (isDraggingRef.current && directionRef.current) {
      if (opts.preventDefault) {
        event.preventDefault();
        event.stopPropagation();
      }

      setState({
        direction: directionRef.current,
        alphaX: alphaRef.current[0],
        alphaY: alphaRef.current[1]
      });

      if (onSwipeEnd) {
        onSwipeEnd({
          direction: directionRef.current,
          alphaX: alphaRef.current[0],
          alphaY: alphaRef.current[1]
        });
      }
    }

    startingPointRef.current = [-1, -1];
    isDraggingRef.current = false;
    directionRef.current = null;
  };

  onMouseDown(startSwipe);
  onTouchStart(startSwipe);
  onMouseMove(continueSwipe);
  onTouchMove(continueSwipe);
  onMouseUp(endSwipe);
  onTouchEnd(endSwipe);
  onMouseLeave(endSwipe);
  onTouchCancel(endSwipe);
  return state;
};

var useSwipeEvents = function useSwipeEvents() {
  var targetRef = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;

  var opts = _objectSpread2(_objectSpread2({}, defaultOptions), options || {});

  var _createHandlerSetter = createHandlerSetter(),
      _createHandlerSetter2 = _slicedToArray(_createHandlerSetter, 2),
      onSwipeLeft = _createHandlerSetter2[0],
      setOnSwipeLeft = _createHandlerSetter2[1];

  var _createHandlerSetter3 = createHandlerSetter(),
      _createHandlerSetter4 = _slicedToArray(_createHandlerSetter3, 2),
      onSwipeRight = _createHandlerSetter4[0],
      setOnSwipeRight = _createHandlerSetter4[1];

  var _createHandlerSetter5 = createHandlerSetter(),
      _createHandlerSetter6 = _slicedToArray(_createHandlerSetter5, 2),
      onSwipeUp = _createHandlerSetter6[0],
      setOnSwipeUp = _createHandlerSetter6[1];

  var _createHandlerSetter7 = createHandlerSetter(),
      _createHandlerSetter8 = _slicedToArray(_createHandlerSetter7, 2),
      onSwipeDown = _createHandlerSetter8[0],
      setOnSwipeDown = _createHandlerSetter8[1];

  var _createHandlerSetter9 = createHandlerSetter(),
      _createHandlerSetter10 = _slicedToArray(_createHandlerSetter9, 2),
      onSwipeStart = _createHandlerSetter10[0],
      setOnSwipeStart = _createHandlerSetter10[1];

  var _createHandlerSetter11 = createHandlerSetter(),
      _createHandlerSetter12 = _slicedToArray(_createHandlerSetter11, 2),
      onSwipeMove = _createHandlerSetter12[0],
      setOnSwipeMove = _createHandlerSetter12[1];

  var _createHandlerSetter13 = createHandlerSetter(),
      _createHandlerSetter14 = _slicedToArray(_createHandlerSetter13, 2),
      onSwipeEnd = _createHandlerSetter14[0],
      setOnSwipeEnd = _createHandlerSetter14[1];

  var state = useSilentSwipeState(targetRef, opts, onSwipeStart.current, onSwipeMove.current, onSwipeEnd.current);
  var fnMap = {
    right: onSwipeRight.current,
    left: onSwipeLeft.current,
    up: onSwipeUp.current,
    down: onSwipeDown.current
  };
  useEffect(function () {
    if (state && state.direction) {
      var cb = fnMap[state.direction];

      if (cb && typeof cb === 'function') {
        cb(state);
      }
    }
  }, [state]);
  return Object.freeze({
    onSwipeLeft: setOnSwipeLeft,
    onSwipeRight: setOnSwipeRight,
    onSwipeUp: setOnSwipeUp,
    onSwipeDown: setOnSwipeDown,
    onSwipeMove: setOnSwipeMove,
    onSwipeStart: setOnSwipeStart,
    onSwipeEnd: setOnSwipeEnd
  });
};

export default useSwipeEvents;
