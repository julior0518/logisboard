/* beautiful-react-hooks version: 0.35.0 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('./_virtual/_rollupPluginBabelHelpers.js');
var createHandlerSetter = require('./utils/createHandlerSetter.js');
var createCbSetterErrorProxy = require('./utils/createCbSetterErrorProxy.js');
var hasOwnProperty = require('./utils/hasOwnProperty.js');
var assignEventCallbackOnMountEffect = require('./utils/assignEventCallbackOnMountEffect.js');

var useTouchEvents = function useTouchEvents() {
  var targetRef = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

  var _createHandlerSetter = createHandlerSetter['default'](),
      _createHandlerSetter2 = _rollupPluginBabelHelpers.slicedToArray(_createHandlerSetter, 2),
      onTouchStartHandler = _createHandlerSetter2[0],
      setOnTouchStartHandler = _createHandlerSetter2[1];

  var _createHandlerSetter3 = createHandlerSetter['default'](),
      _createHandlerSetter4 = _rollupPluginBabelHelpers.slicedToArray(_createHandlerSetter3, 2),
      onTouchEndHandler = _createHandlerSetter4[0],
      setOnTouchEndHandler = _createHandlerSetter4[1];

  var _createHandlerSetter5 = createHandlerSetter['default'](),
      _createHandlerSetter6 = _rollupPluginBabelHelpers.slicedToArray(_createHandlerSetter5, 2),
      onTouchCancelHandler = _createHandlerSetter6[0],
      setOnTouchCancelHandler = _createHandlerSetter6[1];

  var _createHandlerSetter7 = createHandlerSetter['default'](),
      _createHandlerSetter8 = _rollupPluginBabelHelpers.slicedToArray(_createHandlerSetter7, 2),
      onTouchMoveHandler = _createHandlerSetter8[0],
      setOnTouchMoveHandler = _createHandlerSetter8[1];

  if (targetRef !== null && !hasOwnProperty['default'](targetRef, 'current')) {
    return createCbSetterErrorProxy['default']('Unable to assign any touch event to the given ref');
  }

  assignEventCallbackOnMountEffect['default'](targetRef, onTouchStartHandler, 'touchstart');
  assignEventCallbackOnMountEffect['default'](targetRef, onTouchEndHandler, 'touchend');
  assignEventCallbackOnMountEffect['default'](targetRef, onTouchCancelHandler, 'touchcancel');
  assignEventCallbackOnMountEffect['default'](targetRef, onTouchMoveHandler, 'touchmove');
  return Object.freeze({
    onTouchStart: setOnTouchStartHandler,
    onTouchEnd: setOnTouchEndHandler,
    onTouchCancel: setOnTouchCancelHandler,
    onTouchMove: setOnTouchMoveHandler
  });
};

exports.default = useTouchEvents;
