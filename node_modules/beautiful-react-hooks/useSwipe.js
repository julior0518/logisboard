/* beautiful-react-hooks version: 0.35.0 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('./_virtual/_rollupPluginBabelHelpers.js');
var react = require('react');
var useMouseEvents = require('./useMouseEvents.js');
var useTouchEvents = require('./useTouchEvents.js');
var swipeUtils = require('./utils/swipeUtils.js');

var defaultOptions = {
  direction: 'both',
  threshold: 10,
  preventDefault: true
};
var initialState = {
  swiping: false,
  direction: null,
  alphaX: 0,
  alphaY: 0,
  count: 0
};

var isEqual = function isEqual(prev, next) {
  return prev.swiping === next.swiping && prev.direction === next.direction && prev.count === next.count && prev.alphaX === next.alphaX && prev.alphaY === next.alphaY;
};

var useSwipe = function useSwipe() {
  var targetRef = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;

  var _useState = react.useState(initialState),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var startingPointRef = react.useRef([-1, -1]);
  var isDraggingRef = react.useRef(false);

  var opts = _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, defaultOptions), options || {});

  var _useMouseEvents = useMouseEvents['default'](targetRef),
      onMouseDown = _useMouseEvents.onMouseDown,
      onMouseMove = _useMouseEvents.onMouseMove,
      onMouseLeave = _useMouseEvents.onMouseLeave,
      onMouseUp = _useMouseEvents.onMouseUp;

  var _useTouchEvents = useTouchEvents['default'](targetRef),
      onTouchStart = _useTouchEvents.onTouchStart,
      onTouchMove = _useTouchEvents.onTouchMove,
      onTouchEnd = _useTouchEvents.onTouchEnd,
      onTouchCancel = _useTouchEvents.onTouchCancel;

  var startSwipe = function startSwipe(event) {
    var _getPointerCoordinate = swipeUtils.getPointerCoordinates(event),
        _getPointerCoordinate2 = _rollupPluginBabelHelpers.slicedToArray(_getPointerCoordinate, 2),
        clientX = _getPointerCoordinate2[0],
        clientY = _getPointerCoordinate2[1];

    startingPointRef.current = [clientX, clientY];

    if (opts.preventDefault) {
      event.preventDefault();
      event.stopPropagation();
    }
  };

  var continueSwipe = function continueSwipe(event) {
    var _getPointerCoordinate3 = swipeUtils.getPointerCoordinates(event),
        _getPointerCoordinate4 = _rollupPluginBabelHelpers.slicedToArray(_getPointerCoordinate3, 2),
        clientX = _getPointerCoordinate4[0],
        clientY = _getPointerCoordinate4[1];

    if (opts.preventDefault) {
      event.preventDefault();
      event.stopPropagation();
    }

    if (isDraggingRef.current || startingPointRef.current[0] !== -1 && startingPointRef.current[1] !== -1) {
      var alpha = [startingPointRef.current[0] - clientX, startingPointRef.current[1] - clientY];

      if (opts.direction === 'both' && (Math.abs(alpha[0]) > opts.threshold || Math.abs(alpha[1]) > opts.threshold)) {
        isDraggingRef.current = true;
        var nextState = {
          alphaX: alpha[0],
          alphaY: alpha[1],
          count: state.count,
          swiping: true,
          direction: swipeUtils.getDirection([clientX, clientY], startingPointRef.current, alpha)
        };

        if (!isEqual(nextState, state)) {
          setState(nextState);
        }
      }

      if (opts.direction === 'horizontal' && Math.abs(alpha[0]) > opts.threshold) {
        isDraggingRef.current = true;
        var _nextState = {
          alphaX: alpha[0],
          alphaY: 0,
          count: state.count,
          swiping: true,
          direction: swipeUtils.getHorizontalDirection(alpha[0])
        };

        if (!isEqual(_nextState, state)) {
          setState(_nextState);
        }
      }

      if (opts.direction === 'vertical' && Math.abs(alpha[1]) > opts.threshold) {
        isDraggingRef.current = true;
        var _nextState2 = {
          alphaY: alpha[1],
          alphaX: 0,
          count: state.count,
          swiping: true,
          direction: swipeUtils.getVerticalDirection(alpha[1])
        };

        if (!isEqual(_nextState2, state)) {
          setState(_nextState2);
        }
      }
    }
  };

  var endSwipe = function endSwipe(event) {
    if (isDraggingRef.current) {
      if (opts.preventDefault) {
        event.preventDefault();
        event.stopPropagation();
      }

      setState(function (prevState) {
        return _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, prevState), {}, {
          swiping: false,
          count: state.count + 1
        });
      });
    }

    startingPointRef.current = [-1, -1];
    isDraggingRef.current = false;
  };

  onMouseDown(startSwipe);
  onTouchStart(startSwipe);
  onMouseMove(continueSwipe);
  onTouchMove(continueSwipe);
  onMouseUp(endSwipe);
  onTouchEnd(endSwipe);
  onMouseLeave(endSwipe);
  onTouchCancel(endSwipe);
  return state;
};

exports.default = useSwipe;
