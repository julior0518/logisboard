{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/julio/Desktop/fe-code-challenge_2e0e8f4 (extract.me)/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/julio/Desktop/fe-code-challenge_2e0e8f4 (extract.me)/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"C:/Users/julio/Desktop/fe-code-challenge_2e0e8f4 (extract.me)/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{format}from'date-fns';import{SHIPMENTS_DATA}from'./shipments-data';// To make your life easier, we'll adjust the dates to be more current\nvar millisToAdd=new Date().getTime()-new Date(\"4/19/19\").getTime();var adjustDateString=function adjustDateString(dateString){var originalTimeInMillis=new Date(dateString).getTime();var newTimeInMillis=originalTimeInMillis+millisToAdd;var adjustedDate=new Date(newTimeInMillis);return format(adjustedDate,'MM/dd/yy');};var adjustShipmentDates=function adjustShipmentDates(shipments){return shipments.map(function(shipment){return _objectSpread(_objectSpread({},shipment),{},{estimatedArrival:adjustDateString(shipment.estimatedArrival),estimatedDeparture:adjustDateString(shipment.estimatedDeparture)});});};// Feel free to change this constant to a really high % during your testing to\n// make sure your failure handling works, and to a low number while you're\n// developing / testing your success case\nvar FAILURE_RATIO=.1;var setTimeoutAsync=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(millis){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",new Promise(function(resolve){return setTimeout(resolve,millis);}));case 1:case\"end\":return _context.stop();}}},_callee);}));return function setTimeoutAsync(_x){return _ref.apply(this,arguments);};}();export var fetchShipments=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var waitTimeMillis,shouldFail;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:waitTimeMillis=200+1800*Math.random();_context2.next=3;return setTimeoutAsync(waitTimeMillis);case 3:shouldFail=Math.random()<FAILURE_RATIO;if(!shouldFail){_context2.next=6;break;}return _context2.abrupt(\"return\",{status:'ERROR',message:'Something went wrong'});case 6:return _context2.abrupt(\"return\",{status:'SUCCESS',shipments:adjustShipmentDates(SHIPMENTS_DATA)});case 7:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchShipments(){return _ref2.apply(this,arguments);};}();","map":{"version":3,"sources":["C:/Users/julio/Desktop/fe-code-challenge_2e0e8f4 (extract.me)/src/data/fetch-shipments.tsx"],"names":["format","SHIPMENTS_DATA","millisToAdd","Date","getTime","adjustDateString","dateString","originalTimeInMillis","newTimeInMillis","adjustedDate","adjustShipmentDates","shipments","map","shipment","estimatedArrival","estimatedDeparture","FAILURE_RATIO","setTimeoutAsync","millis","Promise","resolve","setTimeout","fetchShipments","waitTimeMillis","Math","random","shouldFail","status","message"],"mappings":"whBAAA,OAASA,MAAT,KAAuB,UAAvB,CAEA,OAASC,cAAT,KAA+B,kBAA/B,CAgBA;AACA,GAAMC,CAAAA,WAAW,CAAG,GAAIC,CAAAA,IAAJ,GAAWC,OAAX,GAAuB,GAAID,CAAAA,IAAJ,CAAS,SAAT,EAAoBC,OAApB,EAA3C,CACA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,UAAD,CAAgC,CACrD,GAAMC,CAAAA,oBAAoB,CAAG,GAAIJ,CAAAA,IAAJ,CAASG,UAAT,EAAqBF,OAArB,EAA7B,CACA,GAAMI,CAAAA,eAAe,CAAGD,oBAAoB,CAAGL,WAA/C,CACA,GAAMO,CAAAA,YAAY,CAAG,GAAIN,CAAAA,IAAJ,CAASK,eAAT,CAArB,CACA,MAAOR,CAAAA,MAAM,CAACS,YAAD,CAAe,UAAf,CAAb,CACH,CALD,CAOA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,SAAD,QAAuCA,CAAAA,SAAS,CAACC,GAAV,CAAc,SAAAC,QAAQ,wCAClFA,QADkF,MAErFC,gBAAgB,CAAET,gBAAgB,CAACQ,QAAQ,CAACC,gBAAV,CAFmD,CAGrFC,kBAAkB,CAAEV,gBAAgB,CAACQ,QAAQ,CAACE,kBAAV,CAHiD,IAAtB,CAAvC,EAA5B,CAMA;AACA;AACA;AACA,GAAMC,CAAAA,aAAa,CAAG,EAAtB,CAEA,GAAMC,CAAAA,eAAe,0FAAG,iBAAOC,MAAP,kJACb,GAAIC,CAAAA,OAAJ,CAAY,SAAAC,OAAO,QAAIC,CAAAA,UAAU,CAACD,OAAD,CAAUF,MAAV,CAAd,EAAnB,CADa,wDAAH,kBAAfD,CAAAA,eAAe,4CAArB,CAIA,MAAO,IAAMK,CAAAA,cAAc,2FAAG,sKACpBC,cADoB,CACH,IAAM,KAAOC,IAAI,CAACC,MAAL,EADV,wBAEpBR,CAAAA,eAAe,CAACM,cAAD,CAFK,QAGpBG,UAHoB,CAGPF,IAAI,CAACC,MAAL,GAAgBT,aAHT,KAItBU,UAJsB,2DAKf,CACHC,MAAM,CAAE,OADL,CAEHC,OAAO,CAAE,sBAFN,CALe,0CAUnB,CACHD,MAAM,CAAE,SADL,CAEHhB,SAAS,CAAED,mBAAmB,CAACT,cAAD,CAF3B,CAVmB,0DAAH,kBAAdqB,CAAAA,cAAc,2CAApB","sourcesContent":["import { format } from 'date-fns'\nimport { Shipment } from \"./Shipment\"\nimport { SHIPMENTS_DATA } from './shipments-data'\n\ntype ErrorResult = {\n    status: 'ERROR'\n    message: string\n}\n\ntype SuccessResult = {\n    status: 'SUCCESS'\n    shipments: Shipment[]\n}\n\nexport type FetchShipmentsResult =\n    | ErrorResult\n    | SuccessResult\n\n// To make your life easier, we'll adjust the dates to be more current\nconst millisToAdd = new Date().getTime() - new Date(\"4/19/19\").getTime()\nconst adjustDateString = (dateString: string): string => {\n    const originalTimeInMillis = new Date(dateString).getTime()\n    const newTimeInMillis = originalTimeInMillis + millisToAdd\n    const adjustedDate = new Date(newTimeInMillis)\n    return format(adjustedDate, 'MM/dd/yy')\n}\n\nconst adjustShipmentDates = (shipments: Shipment[]): Shipment[] => shipments.map(shipment => ({\n    ...shipment,\n    estimatedArrival: adjustDateString(shipment.estimatedArrival),\n    estimatedDeparture: adjustDateString(shipment.estimatedDeparture)\n}))\n\n// Feel free to change this constant to a really high % during your testing to\n// make sure your failure handling works, and to a low number while you're\n// developing / testing your success case\nconst FAILURE_RATIO = .1\n\nconst setTimeoutAsync = async (millis: number): Promise<void> => {\n    return new Promise(resolve => setTimeout(resolve, millis))\n}\n\nexport const fetchShipments = async (): Promise<FetchShipmentsResult> => {\n    const waitTimeMillis = 200 + 1800 * Math.random()\n    await setTimeoutAsync(waitTimeMillis)\n    const shouldFail = Math.random() < FAILURE_RATIO\n    if (shouldFail) {\n        return {\n            status: 'ERROR',\n            message: 'Something went wrong'\n        }\n    }\n    return {\n        status: 'SUCCESS',\n        shipments: adjustShipmentDates(SHIPMENTS_DATA)\n    }\n}"]},"metadata":{},"sourceType":"module"}