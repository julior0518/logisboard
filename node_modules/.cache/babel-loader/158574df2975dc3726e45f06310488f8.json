{"ast":null,"code":"import { format } from 'date-fns';\nimport { SHIPMENTS_DATA } from './shipments-data';\n// To make your life easier, we'll adjust the dates to be more current\nconst millisToAdd = new Date().getTime() - new Date(\"4/19/19\").getTime();\n\nconst adjustDateString = dateString => {\n  const originalTimeInMillis = new Date(dateString).getTime();\n  const newTimeInMillis = originalTimeInMillis + millisToAdd;\n  const adjustedDate = new Date(newTimeInMillis);\n  return format(adjustedDate);\n};\n\nconst adjustShipmentDates = shipments => shipments.map(shipment => ({ ...shipment,\n  estimatedArrival: adjustDateString(shipment.estimatedArrival),\n  estimatedDeparture: adjustDateString(shipment.estimatedDeparture)\n})); // Feel free to change this constant to a really high % during your testing to\n// make sure your failure handling works, and to a low number while you're\n// developing / testing your success case\n\n\nconst FAILURE_RATIO = .1;\n\nconst setTimeoutAsync = async millis => {\n  return new Promise(resolve => setTimeout(resolve, millis));\n};\n\nexport const fetchShipments = async () => {\n  const waitTimeMillis = 200 + 1800 * Math.random();\n  await setTimeoutAsync(waitTimeMillis);\n  const shouldFail = Math.random() < FAILURE_RATIO;\n\n  if (shouldFail) {\n    return {\n      status: 'ERROR',\n      message: 'Something went wrong'\n    };\n  }\n\n  return {\n    status: 'SUCCESS',\n    shipments: adjustShipmentDates(SHIPMENTS_DATA)\n  };\n};","map":{"version":3,"sources":["C:/Users/julio/Desktop/fe-code-challenge_2e0e8f4 (extract.me)/src/data/fetch-shipments.tsx"],"names":["format","SHIPMENTS_DATA","millisToAdd","Date","getTime","adjustDateString","dateString","originalTimeInMillis","newTimeInMillis","adjustedDate","adjustShipmentDates","shipments","map","shipment","estimatedArrival","estimatedDeparture","FAILURE_RATIO","setTimeoutAsync","millis","Promise","resolve","setTimeout","fetchShipments","waitTimeMillis","Math","random","shouldFail","status","message"],"mappings":"AAAA,SAASA,MAAT,QAAuB,UAAvB;AAEA,SAASC,cAAT,QAA+B,kBAA/B;AAgBA;AACA,MAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAID,IAAJ,CAAS,SAAT,EAAoBC,OAApB,EAA3C;;AACA,MAAMC,gBAAgB,GAAIC,UAAD,IAAgC;AACrD,QAAMC,oBAAoB,GAAG,IAAIJ,IAAJ,CAASG,UAAT,EAAqBF,OAArB,EAA7B;AACA,QAAMI,eAAe,GAAGD,oBAAoB,GAAGL,WAA/C;AACA,QAAMO,YAAY,GAAG,IAAIN,IAAJ,CAASK,eAAT,CAArB;AACA,SAAOR,MAAM,CAACS,YAAD,CAAb;AACH,CALD;;AAOA,MAAMC,mBAAmB,GAAIC,SAAD,IAAuCA,SAAS,CAACC,GAAV,CAAcC,QAAQ,KAAK,EAC1F,GAAGA,QADuF;AAE1FC,EAAAA,gBAAgB,EAAET,gBAAgB,CAACQ,QAAQ,CAACC,gBAAV,CAFwD;AAG1FC,EAAAA,kBAAkB,EAAEV,gBAAgB,CAACQ,QAAQ,CAACE,kBAAV;AAHsD,CAAL,CAAtB,CAAnE,C,CAMA;AACA;AACA;;;AACA,MAAMC,aAAa,GAAG,EAAtB;;AAEA,MAAMC,eAAe,GAAG,MAAOC,MAAP,IAAyC;AAC7D,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,MAAV,CAAjC,CAAP;AACH,CAFD;;AAIA,OAAO,MAAMI,cAAc,GAAG,YAA2C;AACrE,QAAMC,cAAc,GAAG,MAAM,OAAOC,IAAI,CAACC,MAAL,EAApC;AACA,QAAMR,eAAe,CAACM,cAAD,CAArB;AACA,QAAMG,UAAU,GAAGF,IAAI,CAACC,MAAL,KAAgBT,aAAnC;;AACA,MAAIU,UAAJ,EAAgB;AACZ,WAAO;AACHC,MAAAA,MAAM,EAAE,OADL;AAEHC,MAAAA,OAAO,EAAE;AAFN,KAAP;AAIH;;AACD,SAAO;AACHD,IAAAA,MAAM,EAAE,SADL;AAEHhB,IAAAA,SAAS,EAAED,mBAAmB,CAACT,cAAD;AAF3B,GAAP;AAIH,CAdM","sourcesContent":["import { format } from 'date-fns'\nimport { Shipment } from \"./Shipment\"\nimport { SHIPMENTS_DATA } from './shipments-data'\n\ntype ErrorResult = {\n    status: 'ERROR'\n    message: string\n}\n\ntype SuccessResult = {\n    status: 'SUCCESS'\n    shipments: Shipment[]\n}\n\nexport type FetchShipmentsResult =\n    | ErrorResult\n    | SuccessResult\n\n// To make your life easier, we'll adjust the dates to be more current\nconst millisToAdd = new Date().getTime() - new Date(\"4/19/19\").getTime()\nconst adjustDateString = (dateString: string): string => {\n    const originalTimeInMillis = new Date(dateString).getTime()\n    const newTimeInMillis = originalTimeInMillis + millisToAdd\n    const adjustedDate = new Date(newTimeInMillis)\n    return format(adjustedDate)\n}\n\nconst adjustShipmentDates = (shipments: Shipment[]): Shipment[] => shipments.map(shipment => ({\n    ...shipment,\n    estimatedArrival: adjustDateString(shipment.estimatedArrival),\n    estimatedDeparture: adjustDateString(shipment.estimatedDeparture)\n}))\n\n// Feel free to change this constant to a really high % during your testing to\n// make sure your failure handling works, and to a low number while you're\n// developing / testing your success case\nconst FAILURE_RATIO = .1\n\nconst setTimeoutAsync = async (millis: number): Promise<void> => {\n    return new Promise(resolve => setTimeout(resolve, millis))\n}\n\nexport const fetchShipments = async (): Promise<FetchShipmentsResult> => {\n    const waitTimeMillis = 200 + 1800 * Math.random()\n    await setTimeoutAsync(waitTimeMillis)\n    const shouldFail = Math.random() < FAILURE_RATIO\n    if (shouldFail) {\n        return {\n            status: 'ERROR',\n            message: 'Something went wrong'\n        }\n    }\n    return {\n        status: 'SUCCESS',\n        shipments: adjustShipmentDates(SHIPMENTS_DATA)\n    }\n}"]},"metadata":{},"sourceType":"module"}